version: '3.8'

services:
  postgres:
    image: postgres:15-alpine
    container_name: url-shortener-postgres
    restart: unless-stopped
    environment:
      POSTGRES_USER: url_user
      POSTGRES_PASSWORD: url_password_123
      POSTGRES_DB: url_shortener
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8 --lc-collate=C --lc-ctype=C"
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init-db:/docker-entrypoint-initdb.d
    networks:
      - url-shortener-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U url_user -d url_shortener"]
      interval: 10s
      timeout: 5s
      retries: 5

  redis:
    image: redis:7-alpine
    container_name: url-shortener-redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    command: redis-server --appendonly yes --requirepass redis_password_123
    volumes:
      - redis_data:/data
    networks:
      - url-shortener-network
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5

  app:
    build:
      context: .
      dockerfile: Dockerfile
      target: development
    container_name: url-shortener-app
    restart: unless-stopped
    environment:
      DB_HOST: postgres
      DB_PORT: "5432"
      DB_USERNAME: url_user
      DB_PASSWORD: url_password_123
      DB_DATABASE: url_shortener
      
      REDIS_HOST: redis
      REDIS_PORT: "6379"
      REDIS_PASSWORD: redis_password_123
      
      JWT_SECRET: jwt-super-secret-key-development-only
      
      NODE_ENV: development
      PORT: "3000"
      
      ENABLE_LOGGING: "true"
      ENABLE_METRICS: "true"
      LOG_LEVEL: "debug"
    ports:
      - "3000:3000"
    volumes:
      - .:/app
      - /app/node_modules
    networks:
      - url-shortener-network
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  prometheus:
    image: prom/prometheus:latest
    container_name: url-shortener-prometheus
    restart: unless-stopped
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    networks:
      - url-shortener-network
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-lifecycle'

  grafana:
    image: grafana/grafana:latest
    container_name: url-shortener-grafana
    restart: unless-stopped
    ports:
      - "3001:3000"
    environment:
      GF_SECURITY_ADMIN_PASSWORD: admin123
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources
    networks:
      - url-shortener-network
    depends_on:
      - prometheus

  pgadmin:
    image: dpage/pgadmin4:latest
    container_name: url-shortener-pgadmin
    restart: unless-stopped
    environment:
      PGADMIN_DEFAULT_EMAIL: admin@urlshortener.com
      PGADMIN_DEFAULT_PASSWORD: admin123
      PGADMIN_CONFIG_SERVER_MODE: 'False'
    ports:
      - "5050:80"
    volumes:
      - pgadmin_data:/var/lib/pgadmin
    networks:
      - url-shortener-network
    depends_on:
      - postgres

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local
  pgadmin_data:
    driver: local

networks:
  url-shortener-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16